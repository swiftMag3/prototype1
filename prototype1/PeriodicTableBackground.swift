//
//  PeriodicTableBackground.swift
//  Periodic Table
//
//  Created by Swift Mage on 06/12/2017.
//  Copyright Â© 2017 Swift Mage. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class PeriodicTableBackground : NSObject {

    //// Cache

    private struct Cache {
        static let hydrogenColor: UIColor = UIColor(red: 0.595, green: 1.000, blue: 0.611, alpha: 1.000)
        static let alkaliMetalsColor: UIColor = UIColor(red: 1.000, green: 0.862, blue: 0.483, alpha: 1.000)
        static let alkalineEarthMetalsColor: UIColor = UIColor(red: 0.996, green: 0.998, blue: 0.409, alpha: 1.000)
        static let transitionMetalsColor: UIColor = UIColor(red: 0.892, green: 0.780, blue: 0.782, alpha: 1.000)
        static let postTransitionMetalColor: UIColor = UIColor(red: 0.569, green: 0.827, blue: 0.762, alpha: 1.000)
        static let metalloidsColor: UIColor = UIColor(red: 0.464, green: 0.869, blue: 0.532, alpha: 1.000)
        static let otherNonMetalsColor: UIColor = UIColor(red: 0.125, green: 1.000, blue: 0.127, alpha: 1.000)
        static let nobleGasesColor: UIColor = UIColor(red: 0.464, green: 0.800, blue: 0.999, alpha: 1.000)
        static let unknownColor: UIColor = UIColor(red: 0.890, green: 0.890, blue: 0.890, alpha: 1.000)
        static let lanthanoidsColor: UIColor = UIColor(red: 1.000, green: 0.777, blue: 0.661, alpha: 1.000)
        static let actinoidsColor: UIColor = UIColor(red: 0.932, green: 0.735, blue: 0.866, alpha: 1.000)
        static let gradientColor: UIColor = UIColor(red: 0.512, green: 0.860, blue: 0.526, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var hydrogenColor: UIColor { return Cache.hydrogenColor }
    @objc dynamic public class var alkaliMetalsColor: UIColor { return Cache.alkaliMetalsColor }
    @objc dynamic public class var alkalineEarthMetalsColor: UIColor { return Cache.alkalineEarthMetalsColor }
    @objc dynamic public class var transitionMetalsColor: UIColor { return Cache.transitionMetalsColor }
    @objc dynamic public class var postTransitionMetalColor: UIColor { return Cache.postTransitionMetalColor }
    @objc dynamic public class var metalloidsColor: UIColor { return Cache.metalloidsColor }
    @objc dynamic public class var otherNonMetalsColor: UIColor { return Cache.otherNonMetalsColor }
    @objc dynamic public class var nobleGasesColor: UIColor { return Cache.nobleGasesColor }
    @objc dynamic public class var unknownColor: UIColor { return Cache.unknownColor }
    @objc dynamic public class var lanthanoidsColor: UIColor { return Cache.lanthanoidsColor }
    @objc dynamic public class var actinoidsColor: UIColor { return Cache.actinoidsColor }
    @objc dynamic public class var gradientColor: UIColor { return Cache.gradientColor }

    //// Drawing Methods

    @objc dynamic public class func drawPeriodicTablePortrait(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)


        //// Color Declarations
        let background = UIColor(red: 0.818, green: 0.953, blue: 0.929, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
        background.setFill()
        rectanglePath.fill()


        //// Element 1 Drawing
        context.saveGState()
        context.translateBy(x: 39, y: 650)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element1Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.hydrogenColor.setFill()
        element1Path.fill()

        context.restoreGState()


        //// Element 3 Drawing
        context.saveGState()
        context.translateBy(x: 74, y: 650)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.alkaliMetalsColor.setFill()
        element3Path.fill()

        context.restoreGState()


        //// Element 11 Drawing
        context.saveGState()
        context.translateBy(x: 109, y: 650)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element11Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.alkaliMetalsColor.setFill()
        element11Path.fill()

        context.restoreGState()


        //// Element 19 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 650)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element19Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.alkaliMetalsColor.setFill()
        element19Path.fill()

        context.restoreGState()


        //// Element 37 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 650)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element37Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.alkaliMetalsColor.setFill()
        element37Path.fill()

        context.restoreGState()


        //// Element 55 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 650)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element55Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.alkaliMetalsColor.setFill()
        element55Path.fill()

        context.restoreGState()


        //// Element 87 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 650)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element87Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.alkaliMetalsColor.setFill()
        element87Path.fill()

        context.restoreGState()


        //// Element 4 Drawing
        context.saveGState()
        context.translateBy(x: 74, y: 615)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element4Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.alkalineEarthMetalsColor.setFill()
        element4Path.fill()

        context.restoreGState()


        //// Element 12 Drawing
        context.saveGState()
        context.translateBy(x: 109, y: 615)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element12Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.alkalineEarthMetalsColor.setFill()
        element12Path.fill()

        context.restoreGState()


        //// Element 20 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 615)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element20Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.alkalineEarthMetalsColor.setFill()
        element20Path.fill()

        context.restoreGState()


        //// Element 38 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 615)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element38Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.alkalineEarthMetalsColor.setFill()
        element38Path.fill()

        context.restoreGState()


        //// Element 56 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 615)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element56Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.alkalineEarthMetalsColor.setFill()
        element56Path.fill()

        context.restoreGState()


        //// Element 88 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 615)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element88Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.alkalineEarthMetalsColor.setFill()
        element88Path.fill()

        context.restoreGState()


        //// Element 21 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 580)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element21Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element21Path.fill()

        context.restoreGState()


        //// Element 39 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 580)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element39Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element39Path.fill()

        context.restoreGState()


        //// Lanthanoids Cell Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 580)
        context.rotate(by: -90 * CGFloat.pi/180)

        let lanthanoidsCellPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        lanthanoidsCellPath.fill()
        UIColor.lightGray.setStroke()
        lanthanoidsCellPath.lineWidth = 0.25
        lanthanoidsCellPath.stroke()

        context.restoreGState()


        //// Actinoids Cell Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 580)
        context.rotate(by: -90 * CGFloat.pi/180)

        let actinoidsCellPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        actinoidsCellPath.fill()
        UIColor.lightGray.setStroke()
        actinoidsCellPath.lineWidth = 0.25
        actinoidsCellPath.stroke()

        context.restoreGState()


        //// Element 22 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 545)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element22Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element22Path.fill()

        context.restoreGState()


        //// Element 40 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 545)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element40Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element40Path.fill()

        context.restoreGState()


        //// Element 72 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 545)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element72Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element72Path.fill()

        context.restoreGState()


        //// Element 104 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 545)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element104Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element104Path.fill()

        context.restoreGState()


        //// Element 23 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 510)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element23Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element23Path.fill()

        context.restoreGState()


        //// Element 41 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 510)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element41Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element41Path.fill()

        context.restoreGState()


        //// Element 73 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 510)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element73Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element73Path.fill()

        context.restoreGState()


        //// Element 105 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 510)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element105Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element105Path.fill()

        context.restoreGState()


        //// Element 24 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 475)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element24Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element24Path.fill()

        context.restoreGState()


        //// Element 42 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 475)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element42Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element42Path.fill()

        context.restoreGState()


        //// Element 74 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 475)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element74Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element74Path.fill()

        context.restoreGState()


        //// Element 106 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 475)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element106Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element106Path.fill()

        context.restoreGState()


        //// Element 25 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 440)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element25Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element25Path.fill()

        context.restoreGState()


        //// Element 43 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 440)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element43Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element43Path.fill()

        context.restoreGState()


        //// Element 75 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 440)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element75Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element75Path.fill()

        context.restoreGState()


        //// Element 107 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 440)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element107Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element107Path.fill()

        context.restoreGState()


        //// Element 26 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 405)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element26Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element26Path.fill()

        context.restoreGState()


        //// Element 44 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 405)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element44Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element44Path.fill()

        context.restoreGState()


        //// Element 76 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 405)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element76Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element76Path.fill()

        context.restoreGState()


        //// Element 108 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 405)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element108Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element108Path.fill()

        context.restoreGState()


        //// Element 27 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 370)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element27Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element27Path.fill()

        context.restoreGState()


        //// Element 45 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 370)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element45Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element45Path.fill()

        context.restoreGState()


        //// Element 77 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 370)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element77Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element77Path.fill()

        context.restoreGState()


        //// Element 109 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 370)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element109Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.unknownColor.setFill()
        element109Path.fill()

        context.restoreGState()


        //// Element 28 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 335)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element28Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element28Path.fill()

        context.restoreGState()


        //// Element 46 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 335)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element46Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element46Path.fill()

        context.restoreGState()


        //// Element 78 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 335)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element78Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element78Path.fill()

        context.restoreGState()


        //// Element 110 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 335)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element110Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.unknownColor.setFill()
        element110Path.fill()

        context.restoreGState()


        //// Element 29 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 300)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element29Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element29Path.fill()

        context.restoreGState()


        //// Element 47 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 300)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element47Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element47Path.fill()

        context.restoreGState()


        //// Element 79 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 300)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element79Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element79Path.fill()

        context.restoreGState()


        //// Element 111 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 300)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element111Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.unknownColor.setFill()
        element111Path.fill()

        context.restoreGState()


        //// Element 30 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 265)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element30Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element30Path.fill()

        context.restoreGState()


        //// Element 48 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 265)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element48Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element48Path.fill()

        context.restoreGState()


        //// Element 80 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 265)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element80Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element80Path.fill()

        context.restoreGState()


        //// Element 112 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 265)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element112Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        element112Path.fill()

        context.restoreGState()


        //// Element 31 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 230)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element31Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.postTransitionMetalColor.setFill()
        element31Path.fill()

        context.restoreGState()


        //// Element 13 Drawing
        context.saveGState()
        context.translateBy(x: 109, y: 230)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element13Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.postTransitionMetalColor.setFill()
        element13Path.fill()

        context.restoreGState()


        //// Element 49 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 230)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element49Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.postTransitionMetalColor.setFill()
        element49Path.fill()

        context.restoreGState()


        //// Element 81 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 230)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element81Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.postTransitionMetalColor.setFill()
        element81Path.fill()

        context.restoreGState()


        //// Element 5 Drawing
        context.saveGState()
        context.translateBy(x: 74, y: 230)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element5Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.metalloidsColor.setFill()
        element5Path.fill()

        context.restoreGState()


        //// Element 113 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 230)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element113Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.unknownColor.setFill()
        element113Path.fill()

        context.restoreGState()


        //// Element 32 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 195)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element32Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.metalloidsColor.setFill()
        element32Path.fill()

        context.restoreGState()


        //// Element 14 Drawing
        context.saveGState()
        context.translateBy(x: 109, y: 195)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element14Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.metalloidsColor.setFill()
        element14Path.fill()

        context.restoreGState()


        //// Element 50 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 195)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element50Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.postTransitionMetalColor.setFill()
        element50Path.fill()

        context.restoreGState()


        //// Element 82 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 195)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element82Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.postTransitionMetalColor.setFill()
        element82Path.fill()

        context.restoreGState()


        //// Element 6 Drawing
        context.saveGState()
        context.translateBy(x: 74, y: 195)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element6Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.otherNonMetalsColor.setFill()
        element6Path.fill()

        context.restoreGState()


        //// Element 114 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 195)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element114Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.postTransitionMetalColor.setFill()
        element114Path.fill()

        context.restoreGState()


        //// Element 33 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element33Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.metalloidsColor.setFill()
        element33Path.fill()

        context.restoreGState()


        //// Element 15 Drawing
        context.saveGState()
        context.translateBy(x: 109, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element15Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.otherNonMetalsColor.setFill()
        element15Path.fill()

        context.restoreGState()


        //// Element 51 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element51Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.metalloidsColor.setFill()
        element51Path.fill()

        context.restoreGState()


        //// Element 83 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element83Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.postTransitionMetalColor.setFill()
        element83Path.fill()

        context.restoreGState()


        //// Element 7 Drawing
        context.saveGState()
        context.translateBy(x: 74, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element7Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.otherNonMetalsColor.setFill()
        element7Path.fill()

        context.restoreGState()


        //// Element 115 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element115Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.unknownColor.setFill()
        element115Path.fill()

        context.restoreGState()


        //// Element 34 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 125)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element34Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.otherNonMetalsColor.setFill()
        element34Path.fill()

        context.restoreGState()


        //// Element 16 Drawing
        context.saveGState()
        context.translateBy(x: 109, y: 125)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element16Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.otherNonMetalsColor.setFill()
        element16Path.fill()

        context.restoreGState()


        //// Element 52 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 125)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element52Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.metalloidsColor.setFill()
        element52Path.fill()

        context.restoreGState()


        //// Element 84 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 125)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element84Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.postTransitionMetalColor.setFill()
        element84Path.fill()

        context.restoreGState()


        //// Element 8 Drawing
        context.saveGState()
        context.translateBy(x: 74, y: 125)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element8Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.otherNonMetalsColor.setFill()
        element8Path.fill()

        context.restoreGState()


        //// Element 116 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 125)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element116Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.unknownColor.setFill()
        element116Path.fill()

        context.restoreGState()


        //// Element 35 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element35Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.otherNonMetalsColor.setFill()
        element35Path.fill()

        context.restoreGState()


        //// Element 17 Drawing
        context.saveGState()
        context.translateBy(x: 109, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element17Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.otherNonMetalsColor.setFill()
        element17Path.fill()

        context.restoreGState()


        //// Element 53 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element53Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.otherNonMetalsColor.setFill()
        element53Path.fill()

        context.restoreGState()


        //// Element 85 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element85Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.metalloidsColor.setFill()
        element85Path.fill()

        context.restoreGState()


        //// Element 9 Drawing
        context.saveGState()
        context.translateBy(x: 74, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.otherNonMetalsColor.setFill()
        element9Path.fill()

        context.restoreGState()


        //// Element 117 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element117Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.unknownColor.setFill()
        element117Path.fill()

        context.restoreGState()


        //// Element 36 Drawing
        context.saveGState()
        context.translateBy(x: 144, y: 55)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element36Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.nobleGasesColor.setFill()
        element36Path.fill()

        context.restoreGState()


        //// Element 18 Drawing
        context.saveGState()
        context.translateBy(x: 109, y: 55)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element18Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.nobleGasesColor.setFill()
        element18Path.fill()

        context.restoreGState()


        //// Element 54 Drawing
        context.saveGState()
        context.translateBy(x: 179, y: 55)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element54Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.nobleGasesColor.setFill()
        element54Path.fill()

        context.restoreGState()


        //// Element 86 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 55)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element86Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.nobleGasesColor.setFill()
        element86Path.fill()

        context.restoreGState()


        //// Element 10 Drawing
        context.saveGState()
        context.translateBy(x: 74, y: 55)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element10Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.nobleGasesColor.setFill()
        element10Path.fill()

        context.restoreGState()


        //// Element 118 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 55)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element118Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.unknownColor.setFill()
        element118Path.fill()

        context.restoreGState()


        //// Element 2 Drawing
        context.saveGState()
        context.translateBy(x: 39, y: 55)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.nobleGasesColor.setFill()
        element2Path.fill()

        context.restoreGState()


        //// Element 57 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 545)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element57Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element57Path.fill()

        context.restoreGState()


        //// Element 58 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 510)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element58Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element58Path.fill()

        context.restoreGState()


        //// Element 59 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 475)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element59Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element59Path.fill()

        context.restoreGState()


        //// Element 60 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 440)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element60Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element60Path.fill()

        context.restoreGState()


        //// Element 61 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 405)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element61Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element61Path.fill()

        context.restoreGState()


        //// Element 62 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 370)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element62Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element62Path.fill()

        context.restoreGState()


        //// Element 63 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 335)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element63Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element63Path.fill()

        context.restoreGState()


        //// Element 64 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 300)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element64Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element64Path.fill()

        context.restoreGState()


        //// Element 65 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 265)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element65Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element65Path.fill()

        context.restoreGState()


        //// Element 66 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 230)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element66Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element66Path.fill()

        context.restoreGState()


        //// Element 67 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 195)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element67Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element67Path.fill()

        context.restoreGState()


        //// Element 68 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element68Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element68Path.fill()

        context.restoreGState()


        //// Element 69 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 125)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element69Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element69Path.fill()

        context.restoreGState()


        //// Element 70 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element70Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element70Path.fill()

        context.restoreGState()


        //// Element 71 Drawing
        context.saveGState()
        context.translateBy(x: 295, y: 55)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element71Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        element71Path.fill()

        context.restoreGState()


        //// Element Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 55)
        context.rotate(by: -90 * CGFloat.pi/180)

        let elementPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        elementPath.fill()

        context.restoreGState()


        //// Element 89 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 545)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element89Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element89Path.fill()

        context.restoreGState()


        //// Element 90 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 510)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element90Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element90Path.fill()

        context.restoreGState()


        //// Element 91 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 475)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element91Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element91Path.fill()

        context.restoreGState()


        //// Element 92 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 440)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element92Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element92Path.fill()

        context.restoreGState()


        //// Element 93 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 405)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element93Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element93Path.fill()

        context.restoreGState()


        //// Element 94 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 370)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element94Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element94Path.fill()

        context.restoreGState()


        //// Element 95 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 335)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element95Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element95Path.fill()

        context.restoreGState()


        //// Element 96 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 300)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element96Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element96Path.fill()

        context.restoreGState()


        //// Element 97 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 265)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element97Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element97Path.fill()

        context.restoreGState()


        //// Element 98 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 230)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element98Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element98Path.fill()

        context.restoreGState()


        //// Element 99 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 195)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element99Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element99Path.fill()

        context.restoreGState()


        //// Element 100 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element100Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element100Path.fill()

        context.restoreGState()


        //// Element 101 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 125)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element101Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element101Path.fill()

        context.restoreGState()


        //// Element 102 Drawing
        context.saveGState()
        context.translateBy(x: 330, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let element102Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 35, height: 35))
        PeriodicTableBackground.actinoidsColor.setFill()
        element102Path.fill()

        context.restoreGState()


        //// Period1Label Drawing
        context.saveGState()
        context.translateBy(x: 46, y: 667)
        context.rotate(by: -90 * CGFloat.pi/180)

        let period1LabelRect = CGRect(x: 0, y: 0, width: 17, height: 21)
        let period1LabelTextContent = "1"
        let period1LabelStyle = NSMutableParagraphStyle()
        period1LabelStyle.alignment = .center
        let period1LabelFontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: period1LabelStyle,
        ] as [NSAttributedStringKey: Any]

        let period1LabelTextHeight: CGFloat = period1LabelTextContent.boundingRect(with: CGSize(width: period1LabelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: period1LabelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: period1LabelRect)
        period1LabelTextContent.draw(in: CGRect(x: period1LabelRect.minX, y: period1LabelRect.minY + (period1LabelRect.height - period1LabelTextHeight) / 2, width: period1LabelRect.width, height: period1LabelTextHeight), withAttributes: period1LabelFontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Period1Label 2 Drawing
        context.saveGState()
        context.translateBy(x: 81, y: 667)
        context.rotate(by: -90 * CGFloat.pi/180)

        let period1Label2Rect = CGRect(x: 0, y: 0, width: 17, height: 21)
        let period1Label2TextContent = "2"
        let period1Label2Style = NSMutableParagraphStyle()
        period1Label2Style.alignment = .center
        let period1Label2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: period1Label2Style,
        ] as [NSAttributedStringKey: Any]

        let period1Label2TextHeight: CGFloat = period1Label2TextContent.boundingRect(with: CGSize(width: period1Label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: period1Label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: period1Label2Rect)
        period1Label2TextContent.draw(in: CGRect(x: period1Label2Rect.minX, y: period1Label2Rect.minY + (period1Label2Rect.height - period1Label2TextHeight) / 2, width: period1Label2Rect.width, height: period1Label2TextHeight), withAttributes: period1Label2FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Period1Label 3 Drawing
        context.saveGState()
        context.translateBy(x: 116, y: 667)
        context.rotate(by: -90 * CGFloat.pi/180)

        let period1Label3Rect = CGRect(x: 0, y: 0, width: 17, height: 21)
        let period1Label3TextContent = "3"
        let period1Label3Style = NSMutableParagraphStyle()
        period1Label3Style.alignment = .center
        let period1Label3FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: period1Label3Style,
        ] as [NSAttributedStringKey: Any]

        let period1Label3TextHeight: CGFloat = period1Label3TextContent.boundingRect(with: CGSize(width: period1Label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: period1Label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: period1Label3Rect)
        period1Label3TextContent.draw(in: CGRect(x: period1Label3Rect.minX, y: period1Label3Rect.minY + (period1Label3Rect.height - period1Label3TextHeight) / 2, width: period1Label3Rect.width, height: period1Label3TextHeight), withAttributes: period1Label3FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Period1Label 4 Drawing
        context.saveGState()
        context.translateBy(x: 151, y: 667)
        context.rotate(by: -90 * CGFloat.pi/180)

        let period1Label4Rect = CGRect(x: 0, y: 0, width: 17, height: 21)
        let period1Label4TextContent = "4"
        let period1Label4Style = NSMutableParagraphStyle()
        period1Label4Style.alignment = .center
        let period1Label4FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: period1Label4Style,
        ] as [NSAttributedStringKey: Any]

        let period1Label4TextHeight: CGFloat = period1Label4TextContent.boundingRect(with: CGSize(width: period1Label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: period1Label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: period1Label4Rect)
        period1Label4TextContent.draw(in: CGRect(x: period1Label4Rect.minX, y: period1Label4Rect.minY + (period1Label4Rect.height - period1Label4TextHeight) / 2, width: period1Label4Rect.width, height: period1Label4TextHeight), withAttributes: period1Label4FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Period1Label 5 Drawing
        context.saveGState()
        context.translateBy(x: 186, y: 667)
        context.rotate(by: -90 * CGFloat.pi/180)

        let period1Label5Rect = CGRect(x: 0, y: 0, width: 17, height: 21)
        let period1Label5TextContent = "5"
        let period1Label5Style = NSMutableParagraphStyle()
        period1Label5Style.alignment = .center
        let period1Label5FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: period1Label5Style,
        ] as [NSAttributedStringKey: Any]

        let period1Label5TextHeight: CGFloat = period1Label5TextContent.boundingRect(with: CGSize(width: period1Label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: period1Label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: period1Label5Rect)
        period1Label5TextContent.draw(in: CGRect(x: period1Label5Rect.minX, y: period1Label5Rect.minY + (period1Label5Rect.height - period1Label5TextHeight) / 2, width: period1Label5Rect.width, height: period1Label5TextHeight), withAttributes: period1Label5FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Period1Label 6 Drawing
        context.saveGState()
        context.translateBy(x: 221, y: 667)
        context.rotate(by: -90 * CGFloat.pi/180)

        let period1Label6Rect = CGRect(x: 0, y: 0, width: 17, height: 21)
        let period1Label6TextContent = "6"
        let period1Label6Style = NSMutableParagraphStyle()
        period1Label6Style.alignment = .center
        let period1Label6FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: period1Label6Style,
        ] as [NSAttributedStringKey: Any]

        let period1Label6TextHeight: CGFloat = period1Label6TextContent.boundingRect(with: CGSize(width: period1Label6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: period1Label6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: period1Label6Rect)
        period1Label6TextContent.draw(in: CGRect(x: period1Label6Rect.minX, y: period1Label6Rect.minY + (period1Label6Rect.height - period1Label6TextHeight) / 2, width: period1Label6Rect.width, height: period1Label6TextHeight), withAttributes: period1Label6FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Period1Label 7 Drawing
        context.saveGState()
        context.translateBy(x: 256, y: 667)
        context.rotate(by: -90 * CGFloat.pi/180)

        let period1Label7Rect = CGRect(x: 0, y: 0, width: 17, height: 21)
        let period1Label7TextContent = "7"
        let period1Label7Style = NSMutableParagraphStyle()
        period1Label7Style.alignment = .center
        let period1Label7FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: period1Label7Style,
        ] as [NSAttributedStringKey: Any]

        let period1Label7TextHeight: CGFloat = period1Label7TextContent.boundingRect(with: CGSize(width: period1Label7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: period1Label7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: period1Label7Rect)
        period1Label7TextContent.draw(in: CGRect(x: period1Label7Rect.minX, y: period1Label7Rect.minY + (period1Label7Rect.height - period1Label7TextHeight) / 2, width: period1Label7Rect.width, height: period1Label7TextHeight), withAttributes: period1Label7FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 1 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 650)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group1Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group1TextContent = "IA"
        let group1Style = NSMutableParagraphStyle()
        group1Style.alignment = .center
        let group1FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group1Style,
        ] as [NSAttributedStringKey: Any]

        let group1TextHeight: CGFloat = group1TextContent.boundingRect(with: CGSize(width: group1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group1Rect)
        group1TextContent.draw(in: CGRect(x: group1Rect.minX, y: group1Rect.minY + (group1Rect.height - group1TextHeight) / 2, width: group1Rect.width, height: group1TextHeight), withAttributes: group1FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 2 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 614)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group2Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group2TextContent = "IIA"
        let group2Style = NSMutableParagraphStyle()
        group2Style.alignment = .center
        let group2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group2Style,
        ] as [NSAttributedStringKey: Any]

        let group2TextHeight: CGFloat = group2TextContent.boundingRect(with: CGSize(width: group2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group2Rect)
        group2TextContent.draw(in: CGRect(x: group2Rect.minX, y: group2Rect.minY + (group2Rect.height - group2TextHeight) / 2, width: group2Rect.width, height: group2TextHeight), withAttributes: group2FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 3 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 579)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group3Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group3TextContent = "IIIB"
        let group3Style = NSMutableParagraphStyle()
        group3Style.alignment = .center
        let group3FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group3Style,
        ] as [NSAttributedStringKey: Any]

        let group3TextHeight: CGFloat = group3TextContent.boundingRect(with: CGSize(width: group3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group3Rect)
        group3TextContent.draw(in: CGRect(x: group3Rect.minX, y: group3Rect.minY + (group3Rect.height - group3TextHeight) / 2, width: group3Rect.width, height: group3TextHeight), withAttributes: group3FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 4 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 545)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group4Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group4TextContent = "IVB"
        let group4Style = NSMutableParagraphStyle()
        group4Style.alignment = .center
        let group4FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group4Style,
        ] as [NSAttributedStringKey: Any]

        let group4TextHeight: CGFloat = group4TextContent.boundingRect(with: CGSize(width: group4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group4Rect)
        group4TextContent.draw(in: CGRect(x: group4Rect.minX, y: group4Rect.minY + (group4Rect.height - group4TextHeight) / 2, width: group4Rect.width, height: group4TextHeight), withAttributes: group4FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 5 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 510)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group5Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group5TextContent = "VB"
        let group5Style = NSMutableParagraphStyle()
        group5Style.alignment = .center
        let group5FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group5Style,
        ] as [NSAttributedStringKey: Any]

        let group5TextHeight: CGFloat = group5TextContent.boundingRect(with: CGSize(width: group5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group5Rect)
        group5TextContent.draw(in: CGRect(x: group5Rect.minX, y: group5Rect.minY + (group5Rect.height - group5TextHeight) / 2, width: group5Rect.width, height: group5TextHeight), withAttributes: group5FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 6 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 475)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group6Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group6TextContent = "VIB"
        let group6Style = NSMutableParagraphStyle()
        group6Style.alignment = .center
        let group6FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group6Style,
        ] as [NSAttributedStringKey: Any]

        let group6TextHeight: CGFloat = group6TextContent.boundingRect(with: CGSize(width: group6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group6Rect)
        group6TextContent.draw(in: CGRect(x: group6Rect.minX, y: group6Rect.minY + (group6Rect.height - group6TextHeight) / 2, width: group6Rect.width, height: group6TextHeight), withAttributes: group6FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 7 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 440)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group7Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group7TextContent = "VIIB"
        let group7Style = NSMutableParagraphStyle()
        group7Style.alignment = .center
        let group7FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group7Style,
        ] as [NSAttributedStringKey: Any]

        let group7TextHeight: CGFloat = group7TextContent.boundingRect(with: CGSize(width: group7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group7Rect)
        group7TextContent.draw(in: CGRect(x: group7Rect.minX, y: group7Rect.minY + (group7Rect.height - group7TextHeight) / 2, width: group7Rect.width, height: group7TextHeight), withAttributes: group7FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 8 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 405)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group8Rect = CGRect(x: 0, y: 0, width: 105, height: 20)
        let group8TextContent = "VIIIB"
        let group8Style = NSMutableParagraphStyle()
        group8Style.alignment = .center
        let group8FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group8Style,
        ] as [NSAttributedStringKey: Any]

        let group8TextHeight: CGFloat = group8TextContent.boundingRect(with: CGSize(width: group8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group8Rect)
        group8TextContent.draw(in: CGRect(x: group8Rect.minX, y: group8Rect.minY + (group8Rect.height - group8TextHeight) / 2, width: group8Rect.width, height: group8TextHeight), withAttributes: group8FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 11 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 300)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group11Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group11TextContent = "IB"
        let group11Style = NSMutableParagraphStyle()
        group11Style.alignment = .center
        let group11FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group11Style,
        ] as [NSAttributedStringKey: Any]

        let group11TextHeight: CGFloat = group11TextContent.boundingRect(with: CGSize(width: group11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group11FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group11Rect)
        group11TextContent.draw(in: CGRect(x: group11Rect.minX, y: group11Rect.minY + (group11Rect.height - group11TextHeight) / 2, width: group11Rect.width, height: group11TextHeight), withAttributes: group11FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 12 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 265)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group12Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group12TextContent = "IIB"
        let group12Style = NSMutableParagraphStyle()
        group12Style.alignment = .center
        let group12FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group12Style,
        ] as [NSAttributedStringKey: Any]

        let group12TextHeight: CGFloat = group12TextContent.boundingRect(with: CGSize(width: group12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group12FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group12Rect)
        group12TextContent.draw(in: CGRect(x: group12Rect.minX, y: group12Rect.minY + (group12Rect.height - group12TextHeight) / 2, width: group12Rect.width, height: group12TextHeight), withAttributes: group12FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 13 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 230)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group13Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group13TextContent = "IIIA"
        let group13Style = NSMutableParagraphStyle()
        group13Style.alignment = .center
        let group13FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group13Style,
        ] as [NSAttributedStringKey: Any]

        let group13TextHeight: CGFloat = group13TextContent.boundingRect(with: CGSize(width: group13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group13FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group13Rect)
        group13TextContent.draw(in: CGRect(x: group13Rect.minX, y: group13Rect.minY + (group13Rect.height - group13TextHeight) / 2, width: group13Rect.width, height: group13TextHeight), withAttributes: group13FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 14 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 195)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group14Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group14TextContent = "IVA"
        let group14Style = NSMutableParagraphStyle()
        group14Style.alignment = .center
        let group14FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group14Style,
        ] as [NSAttributedStringKey: Any]

        let group14TextHeight: CGFloat = group14TextContent.boundingRect(with: CGSize(width: group14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group14Rect)
        group14TextContent.draw(in: CGRect(x: group14Rect.minX, y: group14Rect.minY + (group14Rect.height - group14TextHeight) / 2, width: group14Rect.width, height: group14TextHeight), withAttributes: group14FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 15 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group15Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group15TextContent = "VA"
        let group15Style = NSMutableParagraphStyle()
        group15Style.alignment = .center
        let group15FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group15Style,
        ] as [NSAttributedStringKey: Any]

        let group15TextHeight: CGFloat = group15TextContent.boundingRect(with: CGSize(width: group15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group15FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group15Rect)
        group15TextContent.draw(in: CGRect(x: group15Rect.minX, y: group15Rect.minY + (group15Rect.height - group15TextHeight) / 2, width: group15Rect.width, height: group15TextHeight), withAttributes: group15FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 16 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 125)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group16Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group16TextContent = "VIA"
        let group16Style = NSMutableParagraphStyle()
        group16Style.alignment = .center
        let group16FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group16Style,
        ] as [NSAttributedStringKey: Any]

        let group16TextHeight: CGFloat = group16TextContent.boundingRect(with: CGSize(width: group16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group16Rect)
        group16TextContent.draw(in: CGRect(x: group16Rect.minX, y: group16Rect.minY + (group16Rect.height - group16TextHeight) / 2, width: group16Rect.width, height: group16TextHeight), withAttributes: group16FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 17 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group17Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group17TextContent = "VIIA"
        let group17Style = NSMutableParagraphStyle()
        group17Style.alignment = .center
        let group17FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group17Style,
        ] as [NSAttributedStringKey: Any]

        let group17TextHeight: CGFloat = group17TextContent.boundingRect(with: CGSize(width: group17Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group17FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group17Rect)
        group17TextContent.draw(in: CGRect(x: group17Rect.minX, y: group17Rect.minY + (group17Rect.height - group17TextHeight) / 2, width: group17Rect.width, height: group17TextHeight), withAttributes: group17FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group 18 Drawing
        context.saveGState()
        context.translateBy(x: 19, y: 55)
        context.rotate(by: -90 * CGFloat.pi/180)

        let group18Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let group18TextContent = "VIIIA"
        let group18Style = NSMutableParagraphStyle()
        group18Style.alignment = .center
        let group18FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: group18Style,
        ] as [NSAttributedStringKey: Any]

        let group18TextHeight: CGFloat = group18TextContent.boundingRect(with: CGSize(width: group18Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: group18FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: group18Rect)
        group18TextContent.draw(in: CGRect(x: group18Rect.minX, y: group18Rect.minY + (group18Rect.height - group18TextHeight) / 2, width: group18Rect.width, height: group18TextHeight), withAttributes: group18FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 1 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 650)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup1Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup1TextContent = "1"
        let iUPACGroup1Style = NSMutableParagraphStyle()
        iUPACGroup1Style.alignment = .center
        let iUPACGroup1FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup1Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup1TextHeight: CGFloat = iUPACGroup1TextContent.boundingRect(with: CGSize(width: iUPACGroup1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup1Rect)
        iUPACGroup1TextContent.draw(in: CGRect(x: iUPACGroup1Rect.minX, y: iUPACGroup1Rect.minY + (iUPACGroup1Rect.height - iUPACGroup1TextHeight) / 2, width: iUPACGroup1Rect.width, height: iUPACGroup1TextHeight), withAttributes: iUPACGroup1FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 2 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 614)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup2Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup2TextContent = "2"
        let iUPACGroup2Style = NSMutableParagraphStyle()
        iUPACGroup2Style.alignment = .center
        let iUPACGroup2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup2Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup2TextHeight: CGFloat = iUPACGroup2TextContent.boundingRect(with: CGSize(width: iUPACGroup2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup2Rect)
        iUPACGroup2TextContent.draw(in: CGRect(x: iUPACGroup2Rect.minX, y: iUPACGroup2Rect.minY + (iUPACGroup2Rect.height - iUPACGroup2TextHeight) / 2, width: iUPACGroup2Rect.width, height: iUPACGroup2TextHeight), withAttributes: iUPACGroup2FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 3 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 579)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup3Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup3TextContent = "3"
        let iUPACGroup3Style = NSMutableParagraphStyle()
        iUPACGroup3Style.alignment = .center
        let iUPACGroup3FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup3Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup3TextHeight: CGFloat = iUPACGroup3TextContent.boundingRect(with: CGSize(width: iUPACGroup3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup3Rect)
        iUPACGroup3TextContent.draw(in: CGRect(x: iUPACGroup3Rect.minX, y: iUPACGroup3Rect.minY + (iUPACGroup3Rect.height - iUPACGroup3TextHeight) / 2, width: iUPACGroup3Rect.width, height: iUPACGroup3TextHeight), withAttributes: iUPACGroup3FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 4 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 545)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup4Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup4TextContent = "4"
        let iUPACGroup4Style = NSMutableParagraphStyle()
        iUPACGroup4Style.alignment = .center
        let iUPACGroup4FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup4Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup4TextHeight: CGFloat = iUPACGroup4TextContent.boundingRect(with: CGSize(width: iUPACGroup4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup4Rect)
        iUPACGroup4TextContent.draw(in: CGRect(x: iUPACGroup4Rect.minX, y: iUPACGroup4Rect.minY + (iUPACGroup4Rect.height - iUPACGroup4TextHeight) / 2, width: iUPACGroup4Rect.width, height: iUPACGroup4TextHeight), withAttributes: iUPACGroup4FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 5 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 510)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup5Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup5TextContent = "5"
        let iUPACGroup5Style = NSMutableParagraphStyle()
        iUPACGroup5Style.alignment = .center
        let iUPACGroup5FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup5Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup5TextHeight: CGFloat = iUPACGroup5TextContent.boundingRect(with: CGSize(width: iUPACGroup5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup5Rect)
        iUPACGroup5TextContent.draw(in: CGRect(x: iUPACGroup5Rect.minX, y: iUPACGroup5Rect.minY + (iUPACGroup5Rect.height - iUPACGroup5TextHeight) / 2, width: iUPACGroup5Rect.width, height: iUPACGroup5TextHeight), withAttributes: iUPACGroup5FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 6 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 475)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup6Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup6TextContent = "6"
        let iUPACGroup6Style = NSMutableParagraphStyle()
        iUPACGroup6Style.alignment = .center
        let iUPACGroup6FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup6Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup6TextHeight: CGFloat = iUPACGroup6TextContent.boundingRect(with: CGSize(width: iUPACGroup6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup6Rect)
        iUPACGroup6TextContent.draw(in: CGRect(x: iUPACGroup6Rect.minX, y: iUPACGroup6Rect.minY + (iUPACGroup6Rect.height - iUPACGroup6TextHeight) / 2, width: iUPACGroup6Rect.width, height: iUPACGroup6TextHeight), withAttributes: iUPACGroup6FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 7 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 440)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup7Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup7TextContent = "7"
        let iUPACGroup7Style = NSMutableParagraphStyle()
        iUPACGroup7Style.alignment = .center
        let iUPACGroup7FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup7Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup7TextHeight: CGFloat = iUPACGroup7TextContent.boundingRect(with: CGSize(width: iUPACGroup7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup7Rect)
        iUPACGroup7TextContent.draw(in: CGRect(x: iUPACGroup7Rect.minX, y: iUPACGroup7Rect.minY + (iUPACGroup7Rect.height - iUPACGroup7TextHeight) / 2, width: iUPACGroup7Rect.width, height: iUPACGroup7TextHeight), withAttributes: iUPACGroup7FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 11 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 300)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup11Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup11TextContent = "11"
        let iUPACGroup11Style = NSMutableParagraphStyle()
        iUPACGroup11Style.alignment = .center
        let iUPACGroup11FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup11Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup11TextHeight: CGFloat = iUPACGroup11TextContent.boundingRect(with: CGSize(width: iUPACGroup11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup11FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup11Rect)
        iUPACGroup11TextContent.draw(in: CGRect(x: iUPACGroup11Rect.minX, y: iUPACGroup11Rect.minY + (iUPACGroup11Rect.height - iUPACGroup11TextHeight) / 2, width: iUPACGroup11Rect.width, height: iUPACGroup11TextHeight), withAttributes: iUPACGroup11FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 12 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 265)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup12Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup12TextContent = "12"
        let iUPACGroup12Style = NSMutableParagraphStyle()
        iUPACGroup12Style.alignment = .center
        let iUPACGroup12FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup12Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup12TextHeight: CGFloat = iUPACGroup12TextContent.boundingRect(with: CGSize(width: iUPACGroup12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup12FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup12Rect)
        iUPACGroup12TextContent.draw(in: CGRect(x: iUPACGroup12Rect.minX, y: iUPACGroup12Rect.minY + (iUPACGroup12Rect.height - iUPACGroup12TextHeight) / 2, width: iUPACGroup12Rect.width, height: iUPACGroup12TextHeight), withAttributes: iUPACGroup12FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 13 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 230)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup13Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup13TextContent = "13"
        let iUPACGroup13Style = NSMutableParagraphStyle()
        iUPACGroup13Style.alignment = .center
        let iUPACGroup13FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup13Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup13TextHeight: CGFloat = iUPACGroup13TextContent.boundingRect(with: CGSize(width: iUPACGroup13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup13FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup13Rect)
        iUPACGroup13TextContent.draw(in: CGRect(x: iUPACGroup13Rect.minX, y: iUPACGroup13Rect.minY + (iUPACGroup13Rect.height - iUPACGroup13TextHeight) / 2, width: iUPACGroup13Rect.width, height: iUPACGroup13TextHeight), withAttributes: iUPACGroup13FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 14 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 195)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup14Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup14TextContent = "14"
        let iUPACGroup14Style = NSMutableParagraphStyle()
        iUPACGroup14Style.alignment = .center
        let iUPACGroup14FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup14Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup14TextHeight: CGFloat = iUPACGroup14TextContent.boundingRect(with: CGSize(width: iUPACGroup14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup14Rect)
        iUPACGroup14TextContent.draw(in: CGRect(x: iUPACGroup14Rect.minX, y: iUPACGroup14Rect.minY + (iUPACGroup14Rect.height - iUPACGroup14TextHeight) / 2, width: iUPACGroup14Rect.width, height: iUPACGroup14TextHeight), withAttributes: iUPACGroup14FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 15 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup15Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup15TextContent = "15"
        let iUPACGroup15Style = NSMutableParagraphStyle()
        iUPACGroup15Style.alignment = .center
        let iUPACGroup15FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup15Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup15TextHeight: CGFloat = iUPACGroup15TextContent.boundingRect(with: CGSize(width: iUPACGroup15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup15FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup15Rect)
        iUPACGroup15TextContent.draw(in: CGRect(x: iUPACGroup15Rect.minX, y: iUPACGroup15Rect.minY + (iUPACGroup15Rect.height - iUPACGroup15TextHeight) / 2, width: iUPACGroup15Rect.width, height: iUPACGroup15TextHeight), withAttributes: iUPACGroup15FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 16 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 125)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup16Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup16TextContent = "16"
        let iUPACGroup16Style = NSMutableParagraphStyle()
        iUPACGroup16Style.alignment = .center
        let iUPACGroup16FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup16Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup16TextHeight: CGFloat = iUPACGroup16TextContent.boundingRect(with: CGSize(width: iUPACGroup16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup16Rect)
        iUPACGroup16TextContent.draw(in: CGRect(x: iUPACGroup16Rect.minX, y: iUPACGroup16Rect.minY + (iUPACGroup16Rect.height - iUPACGroup16TextHeight) / 2, width: iUPACGroup16Rect.width, height: iUPACGroup16TextHeight), withAttributes: iUPACGroup16FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 17 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup17Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup17TextContent = "17"
        let iUPACGroup17Style = NSMutableParagraphStyle()
        iUPACGroup17Style.alignment = .center
        let iUPACGroup17FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup17Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup17TextHeight: CGFloat = iUPACGroup17TextContent.boundingRect(with: CGSize(width: iUPACGroup17Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup17FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup17Rect)
        iUPACGroup17TextContent.draw(in: CGRect(x: iUPACGroup17Rect.minX, y: iUPACGroup17Rect.minY + (iUPACGroup17Rect.height - iUPACGroup17TextHeight) / 2, width: iUPACGroup17Rect.width, height: iUPACGroup17TextHeight), withAttributes: iUPACGroup17FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 18 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 55)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup18Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup18TextContent = "18"
        let iUPACGroup18Style = NSMutableParagraphStyle()
        iUPACGroup18Style.alignment = .center
        let iUPACGroup18FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup18Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup18TextHeight: CGFloat = iUPACGroup18TextContent.boundingRect(with: CGSize(width: iUPACGroup18Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup18FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup18Rect)
        iUPACGroup18TextContent.draw(in: CGRect(x: iUPACGroup18Rect.minX, y: iUPACGroup18Rect.minY + (iUPACGroup18Rect.height - iUPACGroup18TextHeight) / 2, width: iUPACGroup18Rect.width, height: iUPACGroup18TextHeight), withAttributes: iUPACGroup18FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 8 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 405)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup8Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup8TextContent = "8"
        let iUPACGroup8Style = NSMutableParagraphStyle()
        iUPACGroup8Style.alignment = .center
        let iUPACGroup8FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup8Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup8TextHeight: CGFloat = iUPACGroup8TextContent.boundingRect(with: CGSize(width: iUPACGroup8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup8Rect)
        iUPACGroup8TextContent.draw(in: CGRect(x: iUPACGroup8Rect.minX, y: iUPACGroup8Rect.minY + (iUPACGroup8Rect.height - iUPACGroup8TextHeight) / 2, width: iUPACGroup8Rect.width, height: iUPACGroup8TextHeight), withAttributes: iUPACGroup8FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 9 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 370)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup9Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup9TextContent = "9"
        let iUPACGroup9Style = NSMutableParagraphStyle()
        iUPACGroup9Style.alignment = .center
        let iUPACGroup9FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup9Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup9TextHeight: CGFloat = iUPACGroup9TextContent.boundingRect(with: CGSize(width: iUPACGroup9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup9Rect)
        iUPACGroup9TextContent.draw(in: CGRect(x: iUPACGroup9Rect.minX, y: iUPACGroup9Rect.minY + (iUPACGroup9Rect.height - iUPACGroup9TextHeight) / 2, width: iUPACGroup9Rect.width, height: iUPACGroup9TextHeight), withAttributes: iUPACGroup9FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// IUPAC Group 10 Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 335)
        context.rotate(by: -90 * CGFloat.pi/180)

        let iUPACGroup10Rect = CGRect(x: 0, y: 0, width: 35, height: 20)
        let iUPACGroup10TextContent = "10"
        let iUPACGroup10Style = NSMutableParagraphStyle()
        iUPACGroup10Style.alignment = .center
        let iUPACGroup10FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: iUPACGroup10Style,
        ] as [NSAttributedStringKey: Any]

        let iUPACGroup10TextHeight: CGFloat = iUPACGroup10TextContent.boundingRect(with: CGSize(width: iUPACGroup10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: iUPACGroup10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: iUPACGroup10Rect)
        iUPACGroup10TextContent.draw(in: CGRect(x: iUPACGroup10Rect.minX, y: iUPACGroup10Rect.minY + (iUPACGroup10Rect.height - iUPACGroup10TextHeight) / 2, width: iUPACGroup10Rect.width, height: iUPACGroup10TextHeight), withAttributes: iUPACGroup10FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Lanthanoid Placeholder Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 580)
        context.rotate(by: -90 * CGFloat.pi/180)

        let lanthanoidPlaceholderRect = CGRect(x: 0, y: 0, width: 35, height: 35)
        let lanthanoidPlaceholderTextContent = "57-71"
        let lanthanoidPlaceholderStyle = NSMutableParagraphStyle()
        lanthanoidPlaceholderStyle.alignment = .center
        let lanthanoidPlaceholderFontAttributes = [
            .font: UIFont.systemFont(ofSize: 10),
            .foregroundColor: UIColor.black,
            .paragraphStyle: lanthanoidPlaceholderStyle,
        ] as [NSAttributedStringKey: Any]

        let lanthanoidPlaceholderTextHeight: CGFloat = lanthanoidPlaceholderTextContent.boundingRect(with: CGSize(width: lanthanoidPlaceholderRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: lanthanoidPlaceholderFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: lanthanoidPlaceholderRect)
        lanthanoidPlaceholderTextContent.draw(in: CGRect(x: lanthanoidPlaceholderRect.minX, y: lanthanoidPlaceholderRect.minY + (lanthanoidPlaceholderRect.height - lanthanoidPlaceholderTextHeight) / 2, width: lanthanoidPlaceholderRect.width, height: lanthanoidPlaceholderTextHeight), withAttributes: lanthanoidPlaceholderFontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Actinoid Placeholder 2 Drawing
        context.saveGState()
        context.translateBy(x: 249, y: 580)
        context.rotate(by: -90 * CGFloat.pi/180)

        let actinoidPlaceholder2Rect = CGRect(x: 0, y: 0, width: 35, height: 35)
        let actinoidPlaceholder2TextContent = "89-103"
        let actinoidPlaceholder2Style = NSMutableParagraphStyle()
        actinoidPlaceholder2Style.alignment = .center
        let actinoidPlaceholder2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: actinoidPlaceholder2Style,
        ] as [NSAttributedStringKey: Any]

        let actinoidPlaceholder2TextHeight: CGFloat = actinoidPlaceholder2TextContent.boundingRect(with: CGSize(width: actinoidPlaceholder2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: actinoidPlaceholder2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: actinoidPlaceholder2Rect)
        actinoidPlaceholder2TextContent.draw(in: CGRect(x: actinoidPlaceholder2Rect.minX, y: actinoidPlaceholder2Rect.minY + (actinoidPlaceholder2Rect.height - actinoidPlaceholder2TextHeight) / 2, width: actinoidPlaceholder2Rect.width, height: actinoidPlaceholder2TextHeight), withAttributes: actinoidPlaceholder2FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Group
        context.saveGState()
        context.translateBy(x: 46, y: 554)
        context.rotate(by: -90 * CGFloat.pi/180)



        //// legend alkali Drawing
        let legendAlkaliPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 20, height: 20))
        PeriodicTableBackground.alkaliMetalsColor.setFill()
        legendAlkaliPath.fill()


        //// Alkali metals legend text Drawing
        let alkaliMetalsLegendTextRect = CGRect(x: 21, y: 0, width: 78, height: 20)
        let alkaliMetalsLegendTextTextContent = "Alkali metals"
        let alkaliMetalsLegendTextStyle = NSMutableParagraphStyle()
        alkaliMetalsLegendTextStyle.alignment = .left
        let alkaliMetalsLegendTextFontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: UIColor.black,
            .paragraphStyle: alkaliMetalsLegendTextStyle,
        ] as [NSAttributedStringKey: Any]

        let alkaliMetalsLegendTextTextHeight: CGFloat = alkaliMetalsLegendTextTextContent.boundingRect(with: CGSize(width: alkaliMetalsLegendTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: alkaliMetalsLegendTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: alkaliMetalsLegendTextRect)
        alkaliMetalsLegendTextTextContent.draw(in: CGRect(x: alkaliMetalsLegendTextRect.minX, y: alkaliMetalsLegendTextRect.minY + (alkaliMetalsLegendTextRect.height - alkaliMetalsLegendTextTextHeight) / 2, width: alkaliMetalsLegendTextRect.width, height: alkaliMetalsLegendTextTextHeight), withAttributes: alkaliMetalsLegendTextFontAttributes)
        context.restoreGState()


        //// legend alkaline Drawing
        let legendAlkalinePath = UIBezierPath(rect: CGRect(x: 0, y: 20, width: 20, height: 20))
        PeriodicTableBackground.alkalineEarthMetalsColor.setFill()
        legendAlkalinePath.fill()


        //// Alkaline earth metals legend text Drawing
        let alkalineEarthMetalsLegendTextRect = CGRect(x: 21, y: 20, width: 115, height: 20)
        let alkalineEarthMetalsLegendTextTextContent = "Alkaline earth metals"
        let alkalineEarthMetalsLegendTextStyle = NSMutableParagraphStyle()
        alkalineEarthMetalsLegendTextStyle.alignment = .left
        let alkalineEarthMetalsLegendTextFontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: UIColor.black,
            .paragraphStyle: alkalineEarthMetalsLegendTextStyle,
        ] as [NSAttributedStringKey: Any]

        let alkalineEarthMetalsLegendTextTextHeight: CGFloat = alkalineEarthMetalsLegendTextTextContent.boundingRect(with: CGSize(width: alkalineEarthMetalsLegendTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: alkalineEarthMetalsLegendTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: alkalineEarthMetalsLegendTextRect)
        alkalineEarthMetalsLegendTextTextContent.draw(in: CGRect(x: alkalineEarthMetalsLegendTextRect.minX, y: alkalineEarthMetalsLegendTextRect.minY + (alkalineEarthMetalsLegendTextRect.height - alkalineEarthMetalsLegendTextTextHeight) / 2, width: alkalineEarthMetalsLegendTextRect.width, height: alkalineEarthMetalsLegendTextTextHeight), withAttributes: alkalineEarthMetalsLegendTextFontAttributes)
        context.restoreGState()


        //// legend lanthanoid Drawing
        let legendLanthanoidPath = UIBezierPath(rect: CGRect(x: 0, y: 40, width: 20, height: 20))
        PeriodicTableBackground.lanthanoidsColor.setFill()
        legendLanthanoidPath.fill()


        //// Lanthanoids legend text Drawing
        let lanthanoidsLegendTextRect = CGRect(x: 21, y: 40, width: 78, height: 20)
        let lanthanoidsLegendTextTextContent = "Lanthanoids"
        let lanthanoidsLegendTextStyle = NSMutableParagraphStyle()
        lanthanoidsLegendTextStyle.alignment = .left
        let lanthanoidsLegendTextFontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: UIColor.black,
            .paragraphStyle: lanthanoidsLegendTextStyle,
        ] as [NSAttributedStringKey: Any]

        let lanthanoidsLegendTextTextHeight: CGFloat = lanthanoidsLegendTextTextContent.boundingRect(with: CGSize(width: lanthanoidsLegendTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: lanthanoidsLegendTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: lanthanoidsLegendTextRect)
        lanthanoidsLegendTextTextContent.draw(in: CGRect(x: lanthanoidsLegendTextRect.minX, y: lanthanoidsLegendTextRect.minY + (lanthanoidsLegendTextRect.height - lanthanoidsLegendTextTextHeight) / 2, width: lanthanoidsLegendTextRect.width, height: lanthanoidsLegendTextTextHeight), withAttributes: lanthanoidsLegendTextFontAttributes)
        context.restoreGState()


        //// legend actinoid Drawing
        let legendActinoidPath = UIBezierPath(rect: CGRect(x: 0, y: 60, width: 20, height: 20))
        PeriodicTableBackground.actinoidsColor.setFill()
        legendActinoidPath.fill()


        //// Actinoids legend text Drawing
        let actinoidsLegendTextRect = CGRect(x: 21, y: 60, width: 78, height: 20)
        let actinoidsLegendTextTextContent = "Actinoids"
        let actinoidsLegendTextStyle = NSMutableParagraphStyle()
        actinoidsLegendTextStyle.alignment = .left
        let actinoidsLegendTextFontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: UIColor.black,
            .paragraphStyle: actinoidsLegendTextStyle,
        ] as [NSAttributedStringKey: Any]

        let actinoidsLegendTextTextHeight: CGFloat = actinoidsLegendTextTextContent.boundingRect(with: CGSize(width: actinoidsLegendTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: actinoidsLegendTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: actinoidsLegendTextRect)
        actinoidsLegendTextTextContent.draw(in: CGRect(x: actinoidsLegendTextRect.minX, y: actinoidsLegendTextRect.minY + (actinoidsLegendTextRect.height - actinoidsLegendTextTextHeight) / 2, width: actinoidsLegendTextRect.width, height: actinoidsLegendTextTextHeight), withAttributes: actinoidsLegendTextFontAttributes)
        context.restoreGState()


        //// legend transition metals Drawing
        let legendTransitionMetalsPath = UIBezierPath(rect: CGRect(x: 136, y: 0, width: 20, height: 20))
        PeriodicTableBackground.transitionMetalsColor.setFill()
        legendTransitionMetalsPath.fill()


        //// Transition metals legen text Drawing
        let transitionMetalsLegenTextRect = CGRect(x: 157, y: 0, width: 107, height: 20)
        let transitionMetalsLegenTextTextContent = "Transition metals"
        let transitionMetalsLegenTextStyle = NSMutableParagraphStyle()
        transitionMetalsLegenTextStyle.alignment = .left
        let transitionMetalsLegenTextFontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: UIColor.black,
            .paragraphStyle: transitionMetalsLegenTextStyle,
        ] as [NSAttributedStringKey: Any]

        let transitionMetalsLegenTextTextHeight: CGFloat = transitionMetalsLegenTextTextContent.boundingRect(with: CGSize(width: transitionMetalsLegenTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: transitionMetalsLegenTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: transitionMetalsLegenTextRect)
        transitionMetalsLegenTextTextContent.draw(in: CGRect(x: transitionMetalsLegenTextRect.minX, y: transitionMetalsLegenTextRect.minY + (transitionMetalsLegenTextRect.height - transitionMetalsLegenTextTextHeight) / 2, width: transitionMetalsLegenTextRect.width, height: transitionMetalsLegenTextTextHeight), withAttributes: transitionMetalsLegenTextFontAttributes)
        context.restoreGState()


        //// legend Post-transition metals Drawing
        let legendPosttransitionMetalsPath = UIBezierPath(rect: CGRect(x: 136, y: 20, width: 20, height: 20))
        PeriodicTableBackground.postTransitionMetalColor.setFill()
        legendPosttransitionMetalsPath.fill()


        //// Post-transition metals legend text Drawing
        let posttransitionMetalsLegendTextRect = CGRect(x: 157, y: 20, width: 125, height: 20)
        let posttransitionMetalsLegendTextTextContent = "Post-transition metals"
        let posttransitionMetalsLegendTextStyle = NSMutableParagraphStyle()
        posttransitionMetalsLegendTextStyle.alignment = .left
        let posttransitionMetalsLegendTextFontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: UIColor.black,
            .paragraphStyle: posttransitionMetalsLegendTextStyle,
        ] as [NSAttributedStringKey: Any]

        let posttransitionMetalsLegendTextTextHeight: CGFloat = posttransitionMetalsLegendTextTextContent.boundingRect(with: CGSize(width: posttransitionMetalsLegendTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: posttransitionMetalsLegendTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: posttransitionMetalsLegendTextRect)
        posttransitionMetalsLegendTextTextContent.draw(in: CGRect(x: posttransitionMetalsLegendTextRect.minX, y: posttransitionMetalsLegendTextRect.minY + (posttransitionMetalsLegendTextRect.height - posttransitionMetalsLegendTextTextHeight) / 2, width: posttransitionMetalsLegendTextRect.width, height: posttransitionMetalsLegendTextTextHeight), withAttributes: posttransitionMetalsLegendTextFontAttributes)
        context.restoreGState()


        //// legend other nonmetals Drawing
        let legendOtherNonmetalsPath = UIBezierPath(rect: CGRect(x: 136, y: 40, width: 20, height: 20))
        PeriodicTableBackground.otherNonMetalsColor.setFill()
        legendOtherNonmetalsPath.fill()


        //// other nonmetals legend text Drawing
        let otherNonmetalsLegendTextRect = CGRect(x: 157, y: 40, width: 125, height: 20)
        let otherNonmetalsLegendTextTextContent = "Other nonmetals"
        let otherNonmetalsLegendTextStyle = NSMutableParagraphStyle()
        otherNonmetalsLegendTextStyle.alignment = .left
        let otherNonmetalsLegendTextFontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: UIColor.black,
            .paragraphStyle: otherNonmetalsLegendTextStyle,
        ] as [NSAttributedStringKey: Any]

        let otherNonmetalsLegendTextTextHeight: CGFloat = otherNonmetalsLegendTextTextContent.boundingRect(with: CGSize(width: otherNonmetalsLegendTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: otherNonmetalsLegendTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: otherNonmetalsLegendTextRect)
        otherNonmetalsLegendTextTextContent.draw(in: CGRect(x: otherNonmetalsLegendTextRect.minX, y: otherNonmetalsLegendTextRect.minY + (otherNonmetalsLegendTextRect.height - otherNonmetalsLegendTextTextHeight) / 2, width: otherNonmetalsLegendTextRect.width, height: otherNonmetalsLegendTextTextHeight), withAttributes: otherNonmetalsLegendTextFontAttributes)
        context.restoreGState()


        //// legend noble glases Drawing
        let legendNobleGlasesPath = UIBezierPath(rect: CGRect(x: 136, y: 60, width: 20, height: 20))
        PeriodicTableBackground.nobleGasesColor.setFill()
        legendNobleGlasesPath.fill()


        //// noble gases legend text Drawing
        let nobleGasesLegendTextRect = CGRect(x: 157, y: 60, width: 125, height: 20)
        let nobleGasesLegendTextTextContent = "Noble gases"
        let nobleGasesLegendTextStyle = NSMutableParagraphStyle()
        nobleGasesLegendTextStyle.alignment = .left
        let nobleGasesLegendTextFontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: UIColor.black,
            .paragraphStyle: nobleGasesLegendTextStyle,
        ] as [NSAttributedStringKey: Any]

        let nobleGasesLegendTextTextHeight: CGFloat = nobleGasesLegendTextTextContent.boundingRect(with: CGSize(width: nobleGasesLegendTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nobleGasesLegendTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nobleGasesLegendTextRect)
        nobleGasesLegendTextTextContent.draw(in: CGRect(x: nobleGasesLegendTextRect.minX, y: nobleGasesLegendTextRect.minY + (nobleGasesLegendTextRect.height - nobleGasesLegendTextTextHeight) / 2, width: nobleGasesLegendTextRect.width, height: nobleGasesLegendTextTextHeight), withAttributes: nobleGasesLegendTextFontAttributes)
        context.restoreGState()


        //// legend metalloids Drawing
        let legendMetalloidsPath = UIBezierPath(rect: CGRect(x: 282, y: 0, width: 20, height: 20))
        PeriodicTableBackground.metalloidsColor.setFill()
        legendMetalloidsPath.fill()


        //// metalloinds legend text Drawing
        let metalloindsLegendTextRect = CGRect(x: 303, y: 0, width: 66, height: 20)
        let metalloindsLegendTextTextContent = "Metalloids"
        let metalloindsLegendTextStyle = NSMutableParagraphStyle()
        metalloindsLegendTextStyle.alignment = .left
        let metalloindsLegendTextFontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: UIColor.black,
            .paragraphStyle: metalloindsLegendTextStyle,
        ] as [NSAttributedStringKey: Any]

        let metalloindsLegendTextTextHeight: CGFloat = metalloindsLegendTextTextContent.boundingRect(with: CGSize(width: metalloindsLegendTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: metalloindsLegendTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: metalloindsLegendTextRect)
        metalloindsLegendTextTextContent.draw(in: CGRect(x: metalloindsLegendTextRect.minX, y: metalloindsLegendTextRect.minY + (metalloindsLegendTextRect.height - metalloindsLegendTextTextHeight) / 2, width: metalloindsLegendTextRect.width, height: metalloindsLegendTextTextHeight), withAttributes: metalloindsLegendTextFontAttributes)
        context.restoreGState()


        //// legend unknown Drawing
        let legendUnknownPath = UIBezierPath(rect: CGRect(x: 387, y: 0, width: 20, height: 20))
        PeriodicTableBackground.unknownColor.setFill()
        legendUnknownPath.fill()


        //// unknown legend text Drawing
        let unknownLegendTextRect = CGRect(x: 408, y: 0, width: 66, height: 20)
        let unknownLegendTextTextContent = "Unknown"
        let unknownLegendTextStyle = NSMutableParagraphStyle()
        unknownLegendTextStyle.alignment = .left
        let unknownLegendTextFontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: UIColor.black,
            .paragraphStyle: unknownLegendTextStyle,
        ] as [NSAttributedStringKey: Any]

        let unknownLegendTextTextHeight: CGFloat = unknownLegendTextTextContent.boundingRect(with: CGSize(width: unknownLegendTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: unknownLegendTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: unknownLegendTextRect)
        unknownLegendTextTextContent.draw(in: CGRect(x: unknownLegendTextRect.minX, y: unknownLegendTextRect.minY + (unknownLegendTextRect.height - unknownLegendTextTextHeight) / 2, width: unknownLegendTextRect.width, height: unknownLegendTextTextHeight), withAttributes: unknownLegendTextFontAttributes)
        context.restoreGState()



        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(PeriodicTableBackgroundResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

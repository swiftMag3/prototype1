//
//  LegendKit.swift
//  PeriodicTable
//
//  Created by Swift Mage on 12/12/2017.
//  Copyright Â© 2017 Swift Mage. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class LegendKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawLegend(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 150), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 150)


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 71, y: 41, width: 60, height: 60), cornerRadius: 15)
        UIColor.gray.setFill()
        rectanglePath.fill()


        //// Element Symbol Drawing
        let elementSymbolRect = CGRect(x: 78, y: 50, width: 46, height: 36)
        let elementSymbolTextContent = "C"
        let elementSymbolStyle = NSMutableParagraphStyle()
        elementSymbolStyle.alignment = .center
        let elementSymbolFontAttributes = [
            .font: UIFont.systemFont(ofSize: 31),
            .foregroundColor: UIColor.white,
            .paragraphStyle: elementSymbolStyle,
        ] as [NSAttributedStringKey: Any]

        let elementSymbolTextHeight: CGFloat = elementSymbolTextContent.boundingRect(with: CGSize(width: elementSymbolRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: elementSymbolFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: elementSymbolRect)
        elementSymbolTextContent.draw(in: CGRect(x: elementSymbolRect.minX, y: elementSymbolRect.minY + (elementSymbolRect.height - elementSymbolTextHeight) / 2, width: elementSymbolRect.width, height: elementSymbolTextHeight), withAttributes: elementSymbolFontAttributes)
        context.restoreGState()


        //// Element Name Drawing
        let elementNameRect = CGRect(x: 75, y: 83, width: 53, height: 12)
        let elementNameTextContent = "Carbon"
        let elementNameStyle = NSMutableParagraphStyle()
        elementNameStyle.alignment = .center
        let elementNameFontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: UIColor.white,
            .paragraphStyle: elementNameStyle,
        ] as [NSAttributedStringKey: Any]

        let elementNameTextHeight: CGFloat = elementNameTextContent.boundingRect(with: CGSize(width: elementNameRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: elementNameFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: elementNameRect)
        elementNameTextContent.draw(in: CGRect(x: elementNameRect.minX, y: elementNameRect.minY + (elementNameRect.height - elementNameTextHeight) / 2, width: elementNameRect.width, height: elementNameTextHeight), withAttributes: elementNameFontAttributes)
        context.restoreGState()


        //// Atomic Number Drawing
        let atomicNumberRect = CGRect(x: 71, y: 44, width: 17, height: 18)
        let atomicNumberTextContent = "6"
        let atomicNumberStyle = NSMutableParagraphStyle()
        atomicNumberStyle.alignment = .center
        let atomicNumberFontAttributes = [
            .font: UIFont.systemFont(ofSize: 10),
            .foregroundColor: UIColor.white,
            .paragraphStyle: atomicNumberStyle,
        ] as [NSAttributedStringKey: Any]

        let atomicNumberTextHeight: CGFloat = atomicNumberTextContent.boundingRect(with: CGSize(width: atomicNumberRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: atomicNumberFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: atomicNumberRect)
        atomicNumberTextContent.draw(in: CGRect(x: atomicNumberRect.minX, y: atomicNumberRect.minY + (atomicNumberRect.height - atomicNumberTextHeight) / 2, width: atomicNumberRect.width, height: atomicNumberTextHeight), withAttributes: atomicNumberFontAttributes)
        context.restoreGState()


        //// Atomic Number 2 Drawing
        let atomicNumber2Rect = CGRect(x: 99, y: 44, width: 29, height: 18)
        let atomicNumber2TextContent = "12.0"
        let atomicNumber2Style = NSMutableParagraphStyle()
        atomicNumber2Style.alignment = .right
        let atomicNumber2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.white,
            .paragraphStyle: atomicNumber2Style,
        ] as [NSAttributedStringKey: Any]

        let atomicNumber2TextHeight: CGFloat = atomicNumber2TextContent.boundingRect(with: CGSize(width: atomicNumber2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: atomicNumber2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: atomicNumber2Rect)
        atomicNumber2TextContent.draw(in: CGRect(x: atomicNumber2Rect.minX, y: atomicNumber2Rect.minY + (atomicNumber2Rect.height - atomicNumber2TextHeight) / 2, width: atomicNumber2Rect.width, height: atomicNumber2TextHeight), withAttributes: atomicNumber2FontAttributes)
        context.restoreGState()




        //// Text Drawing
        let textRect = CGRect(x: 24, y: 15, width: 47, height: 29)
        let textTextContent = "Atomic Number"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 131, y: 15, width: 47, height: 29)
        let text2TextContent = "Atomic Mass"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 9, y: 62, width: 47, height: 29)
        let text3TextContent = "Symbol"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 78, y: 107, width: 47, height: 29)
        let text4TextContent = "Name"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text4Style,
        ] as [NSAttributedStringKey: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 131, y: 78, width: 69, height: 29)
        let text5TextContent = "CPK Color (background color)"
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont.systemFont(ofSize: 9),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text5Style,
        ] as [NSAttributedStringKey: Any]

        let text5TextHeight: CGFloat = text5TextContent.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        text5TextContent.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 75.5, y: 49.5))
        bezierPath.addCurve(to: CGPoint(x: 50.5, y: 43.5), controlPoint1: CGPoint(x: 52.5, y: 43.5), controlPoint2: CGPoint(x: 50.5, y: 43.5))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 93.5, y: 70.5))
        bezier2Path.addLine(to: CGPoint(x: 53.5, y: 78.5))
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 124.5, y: 49.5))
        bezier3Path.addLine(to: CGPoint(x: 130.5, y: 28.5))
        UIColor.black.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 101.5, y: 94.5))
        bezier5Path.addLine(to: CGPoint(x: 101.5, y: 115.5))
        UIColor.black.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 125.5, y: 73.5))
        bezier4Path.addLine(to: CGPoint(x: 140.5, y: 80.5))
        UIColor.black.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()
        
        context.restoreGState()

    }




    @objc(LegendKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
